#V2
DEFINE SCOPE user SESSION 7d\n    SIGNIN (\n        SELECT * FROM user\n        WHERE\n                email = string::lowercase($email) AND\n                crypto::argon2::compare(password, $password)\n    )\n    SIGNUP (\n        CREATE user CONTENT {\n            email: string::lowercase($email),\n            password: crypto::argon2::generate($password)\n        }\n    );\n
DEFINE TABLE blog SCHEMAFULL\n    PERMISSIONS\n        FOR create WHERE $scope = 'user'\n        FOR select FULL\n        FOR update WHERE creator = $auth.id\n        FOR delete WHERE creator = $auth.id;\n\nDEFINE FIELD title\n    ON blog\n    TYPE string\n    ASSERT string::len($value) > 0;\n\n\nDEFINE FIELD content\n    ON blog\n    TYPE string\n    ASSERT string::len($value) > 0;\n\nDEFINE FIELD thumbnailImageDownloadUrl\n    ON blog\n    TYPE string\n    ASSERT string::len($value) > 0;\n\nDEFINE FIELD creator\n    ON blog\n    TYPE record<user>\n    DEFAULT $auth.id;\n\nDEFINE FIELD createdAt\n    ON blog\n    VALUE $before OR time::now()\n    DEFAULT time::now();\n\nDEFINE FIELD updatedAt\n    ON blog\n    VALUE time::now()\n    DEFAULT time::now();\n
DEFINE TABLE blogTag SCHEMAFULL\n    PERMISSIONS\n        FOR create WHERE $scope = 'user'\n        FOR select FULL\n        FOR update WHERE in.creator = $auth.id\n        FOR delete WHERE in.creator = $auth.id;\n\nDEFINE FIELD in\n    ON blogTag\n    TYPE record<blog>;\n\nDEFINE FIELD out\n    ON blogTag\n    TYPE record<tag>;\n\nDEFINE FIELD createdAt\n    ON blogTag\n    VALUE $before OR time::now()\n    DEFAULT time::now();\n\nDEFINE FIELD updatedAt\n    ON blogTag\n    VALUE time::now()\n    DEFAULT time::now();\n\nDEFINE INDEX blogTagIndex\n    ON blogTag\n    FIELDS in, out\n    UNIQUE;\n
DEFINE TABLE likes SCHEMAFULL\n    PERMISSIONS\n        FOR create WHERE $scope = 'user'\n        FOR select FULL\n        FOR delete WHERE in = $auth.id\n        FOR update NONE;\n\nDEFINE FIELD in\n    ON likes\n    TYPE record<user>;\n\nDEFINE FIELD out\n    ON likes\n    TYPE record<blog>;\n\nDEFINE FIELD createdAt\n    ON likes\n    VALUE $before OR time::now()\n    DEFAULT time::now();\n\nDEFINE INDEX userBlogLikesIndex\n    ON likes\n    FIELDS in, out\n    UNIQUE;\n
DEFINE TABLE tag SCHEMAFULL\n    PERMISSIONS\n        FOR create WHERE $scope = 'user'\n        FOR select WHERE $scope = 'user'\n        FOR update NONE\n        FOR delete NONE;\n\nDEFINE FIELD name\n    ON tag\n    TYPE string\n    ASSERT string::len($value) > 0;\n\nDEFINE FIELD createdAt ON tag\n    VALUE $before OR time::now()\n    DEFAULT time::now();\n\nDEFINE FIELD updatedAt ON tag\n    VALUE time::now()\n    DEFAULT time::now();\n
DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n        FOR create FULL\n        FOR select FULL\n        FOR update WHERE id = $auth.id\n        FOR delete WHERE id = $auth.id;\n\nDEFINE FIELD email\n    ON user\n    TYPE string\n    VALUE string::lowercase($value);\n\nDEFINE FIELD password\n    ON user\n    TYPE string\n    PERMISSIONS\n        FOR select NONE;\n\nDEFINE FIELD createdAt\n    ON user\n    VALUE $before OR time::now()\n    DEFAULT time::now();\n\nDEFINE FIELD updatedAt\n    ON user\n    VALUE time::now()\n    DEFAULT time::now();\n
DEFINE SCOPE user SESSION 7d\n    SIGNIN {\n        LET $user = (SELECT * FROM user WHERE email = string::lowercase(string::trim($email)) AND crypto::argon2::compare(password, $password));\n\n        IF !$user {\n            THROW "Invalid credentials provided."\n        };\n\n        RETURN $user;\n    };
DEFINE SCOPE user SESSION 7d\n    SIGNIN {\n        LET $user = (SELECT * FROM user WHERE email = string::lowercase(string::trim($email)) AND crypto::argon2::compare(password, $password));\n\n        IF !$user {\n            THROW "Invalid credentials provided."\n        };\n\n        RETURN $user;\n    }\n    SIGNUP {\n        LET $user = (SELECT * FROM ONLY user WHERE email = $email);\n\n        IF $user {\n             THROW "The email " + <string> $email + " is taken.";\n        };\n\n        CREATE user CONTENT {\n            email: string::lowercase(string::trim($email)),\n            password: crypto::argon2::generate($password)\n        };};
DEFINE SCOPE user SESSION 7d\n    SIGNIN {\n        LET $user = (SELECT * FROM user WHERE email = string::lowercase(string::trim($email)) AND crypto::argon2::compare(password, $password));\n\n        IF !$user {\n            THROW "Invalid credentials provided."\n        };\n\n        RETURN $user;\n    }\n    SIGNUP {\n        LET $user = (SELECT * FROM ONLY user WHERE email = $email);\n\n        IF $user {\n             THROW "The email " + <string> $email + " is taken.";\n        };\n\n        CREATE user CONTENT {\n            email: string::lowercase(string::trim($email)),\n            password: crypto::argon2::generate($password)\n        };\n    };
DEFINE TABLE blog SCHEMAFULL\n    PERMISSIONS\n        FOR create WHERE $scope = 'user'\n        FOR select FULL\n        FOR update WHERE creator = $auth.id\n        FOR delete WHERE creator = $auth.id;\n\nDEFINE FIELD title\n    ON blog\n    TYPE string\n    ASSERT string::len($value) > 0;\n\n\nDEFINE FIELD content\n    ON blog\n    TYPE string\n    ASSERT string::len($value) > 0;\n\nDEFINE FIELD thumbnailImageDownloadUrl\n    ON blog\n    TYPE string\n    ASSERT string::len($value) > 0;\n\nDEFINE FIELD creator\n    ON blog\n    TYPE record<user>\n    DEFAULT $auth.id;\n\nDEFINE FIELD createdAt\n    ON blog\n    VALUE $before OR time::now()\n    DEFAULT time::now();\n\nDEFINE FIELD updatedAt\n    ON blog\n    VALUE time::now()\n    DEFAULT time::now();\n
DEFINE TABLE blogTag SCHEMAFULL\n    PERMISSIONS\n        FOR create WHERE $scope = 'user'\n        FOR select FULL\n        FOR update WHERE in.creator = $auth.id\n        FOR delete WHERE in.creator = $auth.id;\n\nDEFINE FIELD in\n    ON blogTag\n    TYPE record<blog>;\n\nDEFINE FIELD out\n    ON blogTag\n    TYPE record<tag>;\n\nDEFINE FIELD createdAt\n    ON blogTag\n    VALUE $before OR time::now()\n    DEFAULT time::now();\n\nDEFINE FIELD updatedAt\n    ON blogTag\n    VALUE time::now()\n    DEFAULT time::now();\n\nDEFINE INDEX blogTagIndex\n    ON blogTag\n    FIELDS in, out\n    UNIQUE;\n
DEFINE TABLE likes SCHEMAFULL\n    PERMISSIONS\n        FOR create WHERE $scope = 'user'\n        FOR select FULL\n        FOR delete WHERE in = $auth.id\n        FOR update NONE;\n\nDEFINE FIELD in\n    ON likes\n    TYPE record<user>;\n\nDEFINE FIELD out\n    ON likes\n    TYPE record<blog>;\n\nDEFINE FIELD createdAt\n    ON likes\n    VALUE $before OR time::now()\n    DEFAULT time::now();\n\nDEFINE INDEX userBlogLikesIndex\n    ON likes\n    FIELDS in, out\n    UNIQUE;\n
DEFINE TABLE tag SCHEMAFULL\n    PERMISSIONS\n        FOR create WHERE $scope = 'user'\n        FOR select WHERE $scope = 'user'\n        FOR update NONE\n        FOR delete NONE;\n\nDEFINE FIELD name\n    ON tag\n    TYPE string\n    ASSERT string::len($value) > 0;\n\nDEFINE FIELD createdAt ON tag\n    VALUE $before OR time::now()\n    DEFAULT time::now();\n\nDEFINE FIELD updatedAt ON tag\n    VALUE time::now()\n    DEFAULT time::now();\n
DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n        FOR create FULL\n        FOR select FULL\n        FOR update WHERE id = $auth.id\n        FOR delete WHERE id = $auth.id;\n\nDEFINE FIELD email\n    ON user\n    TYPE string\n    VALUE string::lowercase($value);\n\nDEFINE FIELD password\n    ON user\n    TYPE string\n    PERMISSIONS\n        FOR select NONE;\n\nDEFINE FIELD createdAt\n    ON user\n    VALUE $before OR time::now()\n    DEFAULT time::now();\n\nDEFINE FIELD updatedAt\n    ON user\n    VALUE time::now()\n    DEFAULT time::now();\n
DEFINE SCOPE user SESSION 7d\n    SIGNIN {\n        LET $user = (SELECT * FROM user WHERE email = string::lowercase(string::trim($email)) AND crypto::argon2::compare(password, $password));\n\n        IF !$user {\n            THROW "Invalid credentials provided."\n        };\n\n        RETURN $user;\n    }\n    SIGNUP {\n        LET $user = (SELECT * FROM ONLY user WHERE email = $email);\n\n        IF $user {\n             THROW "The email " + <string> $email + " is taken.";\n        };\n\n        CREATE user CONTENT {\n            email: string::lowercase(string::trim($email)),\n            password: crypto::argon2::generate($password)\n        };\n    };\n
DEFINE TABLE blog SCHEMAFULL\n    PERMISSIONS\n        FOR create WHERE $scope = 'user'\n        FOR select FULL\n        FOR update WHERE creator = $auth.id\n        FOR delete WHERE creator = $auth.id;\n\nDEFINE FIELD title\n    ON blog\n    TYPE string\n    ASSERT string::len($value) > 0;\n\n\nDEFINE FIELD content\n    ON blog\n    TYPE string\n    ASSERT string::len($value) > 0;\n\nDEFINE FIELD thumbnailImageDownloadUrl\n    ON blog\n    TYPE string\n    ASSERT string::len($value) > 0;\n\nDEFINE FIELD creator\n    ON blog\n    TYPE record<user>\n    DEFAULT $auth.id;\n\nDEFINE FIELD createdAt\n    ON blog\n    VALUE $before OR time::now()\n    DEFAULT time::now();\n\nDEFINE FIELD updatedAt\n    ON blog\n    VALUE time::now()\n    DEFAULT time::now();\n
DEFINE TABLE blogTag SCHEMAFULL\n    PERMISSIONS\n        FOR create WHERE $scope = 'user'\n        FOR select FULL\n        FOR update WHERE in.creator = $auth.id\n        FOR delete WHERE in.creator = $auth.id;\n\nDEFINE FIELD in\n    ON blogTag\n    TYPE record<blog>;\n\nDEFINE FIELD out\n    ON blogTag\n    TYPE record<tag>;\n\nDEFINE FIELD createdAt\n    ON blogTag\n    VALUE $before OR time::now()\n    DEFAULT time::now();\n\nDEFINE FIELD updatedAt\n    ON blogTag\n    VALUE time::now()\n    DEFAULT time::now();\n\nDEFINE INDEX blogTagIndex\n    ON blogTag\n    FIELDS in, out\n    UNIQUE;\n
DEFINE TABLE likes SCHEMAFULL\n    PERMISSIONS\n        FOR create WHERE $scope = 'user'\n        FOR select FULL\n        FOR delete WHERE in = $auth.id\n        FOR update NONE;\n\nDEFINE FIELD in\n    ON likes\n    TYPE record<user>;\n\nDEFINE FIELD out\n    ON likes\n    TYPE record<blog>;\n\nDEFINE FIELD createdAt\n    ON likes\n    VALUE $before OR time::now()\n    DEFAULT time::now();\n\nDEFINE INDEX userBlogLikesIndex\n    ON likes\n    FIELDS in, out\n    UNIQUE;\n
DEFINE TABLE tag SCHEMAFULL\n    PERMISSIONS\n        FOR create WHERE $scope = 'user'\n        FOR select WHERE $scope = 'user'\n        FOR update NONE\n        FOR delete NONE;\n\nDEFINE FIELD name\n    ON tag\n    TYPE string\n    ASSERT string::len($value) > 0;\n\nDEFINE FIELD createdAt ON tag\n    VALUE $before OR time::now()\n    DEFAULT time::now();\n\nDEFINE FIELD updatedAt ON tag\n    VALUE time::now()\n    DEFAULT time::now();\n
DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n        FOR create FULL\n        FOR select FULL\n        FOR update WHERE id = $auth.id\n        FOR delete WHERE id = $auth.id;\n\nDEFINE FIELD email\n    ON user\n    TYPE string\n    VALUE string::lowercase($value);\n\nDEFINE FIELD password\n    ON user\n    TYPE string\n    PERMISSIONS\n        FOR select NONE;\n\nDEFINE FIELD createdAt\n    ON user\n    VALUE $before OR time::now()\n    DEFAULT time::now();\n\nDEFINE FIELD updatedAt\n    ON user\n    VALUE time::now()\n    DEFAULT time::now();\n
(SELECT * FROM ONLY user WHERE email = 'test@test.com')
(SELECT * FROM user WHERE email = 'test@test.com')
DEFINE SCOPE user SESSION 7d\n    SIGNIN {\n        LET $user = (SELECT * FROM user WHERE email = string::lowercase(string::trim($email)) AND crypto::argon2::compare(password, $password));\n\n        IF !$user {\n            THROW "Invalid credentials provided."\n        };\n\n        RETURN $user;\n    }\n    SIGNUP {\n        LET $user = (SELECT * FROM user WHERE email = $email);\n\n        IF $user {\n             THROW "The email " + <string> $email + " is taken.";\n        };\n\n        CREATE user CONTENT {\n            email: string::lowercase(string::trim($email)),\n            password: crypto::argon2::generate($password)\n        };\n    };\n
select * from user;
        RETURN CREATE user CONTENT {\n            email: string::lowercase('test@test123.com'),\n            password: crypto::argon2::generate('password')\n        };
